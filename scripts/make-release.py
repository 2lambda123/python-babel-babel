#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    make-release
    ~~~~~~~~~~~~

    Helper script that performs a release.  Does pretty much everything
    automatically for us.

    :copyright: (c) 2013 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
"""
import sys
import os
import re
from datetime import datetime, date
from subprocess import Popen, PIPE
from collections import Counter
from textwrap import dedent

_date_clean_re = re.compile(r'(\d+)(st|nd|rd|th)')


def parse_changelog():
    with open('CHANGES') as f:
        lineiter = iter(f)
        for line in lineiter:
            match = re.search('^Version\s+(.*)', line.strip())
            if match is None:
                continue
            length = len(match.group(1))
            version = match.group(1).strip()
            if lineiter.next().count('-') != len(match.group(0)):
                continue
            while 1:
                change_info = lineiter.next().strip()
                if change_info:
                    break

            match = re.search(r'released on (\w+\s+\d+\w+\s+\d+)'
                              r'(?:, codename (.*))?(?i)', change_info)
            if match is None:
                continue

            datestr, codename = match.groups()
            return version, parse_date(datestr), codename


def bump_version(version):
    try:
        parts = map(int, version.split('.'))
    except ValueError:
        fail('Current version is not numeric')
    if parts[-1] != 0:
        parts[-1] += 1
    else:
        parts[0] += 1
    return '.'.join(map(str, parts))


def parse_date(string):
    string = _date_clean_re.sub(r'\1', string)
    return datetime.strptime(string, '%B %d %Y')


def set_filename_version(filename, version_number, pattern):
    changed = []
    def inject_version(match):
        before, old, after = match.groups()
        changed.append(True)
        return before + version_number + after
    with open(filename) as f:
        contents = re.sub(r"^(\s*%s\s*=\s*')(.+?)(')(?sm)" % pattern,
                          inject_version, f.read())

    if not changed:
        fail('Could not find %s in %s', pattern, filename)

    with open(filename, 'w') as f:
        f.write(contents)


def set_init_version(version):
    info('Setting __init__.py version to %s', version)
    set_filename_version('babel/__init__.py', version, '__version__')


def set_setup_version(version):
    info('Setting setup.py version to %s', version)
    set_filename_version('setup.py', version, 'version')


def build_and_upload():
    Popen([sys.executable, 'setup.py', 'release', 'sdist', 'upload']).wait()


def fail(message, *args):
    print >> sys.stderr, 'Error:', message % args
    sys.exit(1)


def info(message, *args):
    print >> sys.stderr, message % args


def get_git_tags():
    return set(Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines())


def git_is_clean():
    return Popen(['git', 'diff', '--quiet']).wait() == 0


def make_git_commit(message, *args):
    message = message % args
    Popen(['git', 'commit', '-am', message]).wait()


def make_git_tag(tag):
    info('Tagging "%s"', tag)
    Popen(['git', 'tag', tag]).wait()

def get_sorted_authors_list():
    latest_tag = Popen(['git', 'rev-list', '--tags', '--max-count=1'],
                        stdout=PIPE).communicate()[0].rstrip()

    tag_range = latest_tag + '..HEAD'

    authors = Popen(['git', 'log', '--format=- %aN <%aE>', tag_range],
                    stdout=PIPE).communicate()[0].rstrip().split('\n')

    counts = Counter(authors)

    return sorted(counts.keys(), key=lambda author: counts[author], reverse=True)

def write_authors_file():
    header = dedent(
    '''# This file is auto generated by scripts/make-release.py
    # DO NOT EDIT!

    Babel is written and maintained by the Babel team and various contributors:

    Maintainer and Current Project Lead:

    - Armin Ronacher <armin.ronacher@active-4.com>

    Contributors:
    ''')

    footer = dedent(
    '''Babel was previously developed under the Copyright of Edgewall Software.
    The following copyright notice holds true for releases before 2013:
    "Copyright (c) 2007 - 2011 by Edgewall Software"

    In addition to the regular contributions Babel includes a fork of Lennart
    Regebro's tzlocal that originally was licensed under the CC0 license.  The
    original copyright of that project is "Copyright 2013 by Lennart Regebro".
    ''')

    with open('AUTHORS', 'w') as authors_file:
        authors_file.truncate()
        authors_file.write(header + '\n')

        for author in get_sorted_authors_list():
            authors_file.write(author + '\n')

        authors_file.write(footer + '\n')

    make_git_commit('[GENERATED] Regenerate AUTHORS')

def main():
    os.chdir(os.path.join(os.path.dirname(__file__), '..'))

    rv = parse_changelog()
    if rv is None:
        fail('Could not parse changelog')

    version, release_date, codename = rv
    dev_version = bump_version(version) + '-dev'

    info('Releasing %s (codename %s, release date %s)',
         version, codename, release_date.strftime('%d/%m/%Y'))
    tags = get_git_tags()

    if version in tags:
        fail('Version "%s" is already tagged', version)
    if release_date.date() != date.today():
        fail('Release date is not today (%s != %s)')

    if not git_is_clean():
        fail('You have uncommitted changes in git')

    write_authors_file()

    set_init_version(version)
    set_setup_version(version)
    make_git_commit('Bump version number to %s', version)
    make_git_tag(version)
    build_and_upload()
    set_init_version(dev_version)
    set_setup_version(dev_version)


if __name__ == '__main__':
    main()
